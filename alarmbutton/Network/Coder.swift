//
//  Coder.swift
//  alarmbutton
//
//  Created by Rubeg NPO on 16/06/2020.
//  Copyright Â© 2020 Rubeg NPO. All rights reserved.
//

import Foundation

private typealias Byte = UInt8

class Coder {
    
    private let bytesPt1: [Byte] = [ 0x50, 0x0D, 0x39, 0x41, 0x3B, 0x89, 0x33, 0x88, 0xD1, 0x45, 0x3C, 0x90, 0x16, 0xC8, 0x0E, 0x9F,
                                     0x64, 0x3D, 0xA1, 0x80, 0xB3, 0x49, 0x34, 0xCB, 0x4D, 0x8A, 0x09, 0xCE, 0x82, 0x1F, 0x1E, 0xA0,
                                     0x36, 0x98, 0xE5, 0xC3, 0x69, 0xEC, 0xFD, 0x59, 0xD4, 0x1D, 0xB9, 0xD6, 0xEA, 0x11, 0x65, 0xE1,
                                     0x4A, 0x9D, 0x51, 0x55, 0x0F, 0x4F, 0x56, 0xF2, 0x95, 0xA2, 0x25, 0x24, 0x53, 0x67, 0xD3, 0xB1,
                                     0x70, 0xE4, 0xF3, 0x03, 0xC9, 0xA5, 0x47, 0x9C, 0xF7, 0x8D, 0x28, 0x0B, 0x05, 0x07, 0x5D, 0xAA,
                                     0xAE, 0x32, 0xF0, 0xAD, 0x4C, 0x57, 0x44, 0xF1, 0xEF, 0xF5, 0x93, 0xDB, 0x15, 0xBC, 0x2D, 0xF4,
                                     0x5E, 0x5F, 0x75, 0xCA, 0x00, 0x6D, 0x66, 0xA4, 0xA9, 0x61, 0x2C, 0x8F, 0x97, 0x26, 0xBB, 0x7D,
                                     0x85, 0xB4, 0xA7, 0xFB, 0xA8, 0x86, 0x04, 0xE3, 0xD9, 0xF9, 0xDF, 0xC4, 0xE6, 0xB0, 0x35, 0xE9,
                                     0xC1, 0xBF, 0x54, 0x9E, 0x43, 0x13, 0xC6, 0x8E, 0x84, 0x71, 0xCC, 0xDC, 0x20, 0xB5, 0xFC, 0x0C,
                                     0x9A, 0x96, 0xEB, 0xB8, 0xBD, 0x60, 0xC5, 0x14, 0xCD, 0x2E, 0x78, 0x83, 0xAF, 0x3A, 0x06, 0xD5,
                                     0xE7, 0xDD, 0x2B, 0xAC, 0xD2, 0x30, 0x01, 0x21, 0x2A, 0x23, 0xE2, 0x19, 0x92, 0x17, 0x79, 0x5C,
                                     0xED, 0x3E, 0xA6, 0x46, 0x4E, 0xFE, 0x1B, 0x62, 0x08, 0x4B, 0x6F, 0x38, 0x40, 0x6E, 0xC2, 0xBA,
                                     0x76, 0x7E, 0xFA, 0x1C, 0x63, 0xB6, 0xBE, 0x1A, 0xC7, 0x6C, 0xDE, 0x74, 0x29, 0xEE, 0x31, 0xF6,
                                     0x02, 0x77, 0x5B, 0xDA, 0x0A, 0x52, 0x42, 0x81, 0x7F, 0xB2, 0x7C, 0x6B, 0x87, 0x8C, 0xB7, 0x94,
                                     0x12, 0xCF, 0x5A, 0x6A, 0xD7, 0xE0, 0x48, 0x72, 0x22, 0xFF, 0x27, 0xC0, 0x2F, 0x37, 0x91, 0xD8,
                                     0x3F, 0x7A, 0xD0, 0x18, 0x73, 0xE8, 0xF8, 0x10, 0x58, 0x7B, 0x8B, 0x99, 0x68, 0x9B, 0xA3, 0xAB ]

    private let bytesPt2: [Byte] = [ 0xAE, 0xD4, 0xF8, 0x44, 0x05, 0x83, 0x75, 0xEA, 0x3B, 0x4F, 0x3F, 0xB3, 0x22, 0x65, 0xEB, 0x4D,
                                     0xF9, 0x35, 0x9E, 0xE7, 0xD2, 0xA2, 0x86, 0xCE, 0x21, 0xCF, 0xD9, 0xA6, 0x16, 0xFF, 0xC5, 0x88,
                                     0x46, 0x82, 0x6F, 0x71, 0x8F, 0x28, 0x5D, 0x4C, 0x72, 0xB5, 0xF5, 0x23, 0xFD, 0x59, 0x7D, 0x9F,
                                     0x62, 0xF3, 0xAA, 0xAB, 0xE9, 0x34, 0xD6, 0x33, 0xE1, 0x78, 0xA4, 0xF2, 0x0D, 0x89, 0x53, 0x96,
                                     0x7F, 0xE0, 0x85, 0x64, 0x09, 0x26, 0xF7, 0xCB, 0xFA, 0xB6, 0x3D, 0xF1, 0x45, 0x76, 0x6B, 0x29,
                                     0x87, 0xD7, 0xEF, 0x15, 0x2A, 0xCD, 0x94, 0x79, 0x8B, 0x69, 0xA5, 0x10, 0x97, 0xE3, 0x55, 0x8A,
                                     0x07, 0x32, 0xB2, 0xA7, 0x6D, 0x93, 0x6C, 0x5B, 0x2C, 0x8D, 0x1E, 0x3C, 0x50, 0xBA, 0xC3, 0x95,
                                     0x3A, 0xE6, 0x40, 0xC0, 0xF4, 0x2F, 0x5A, 0xD8, 0x03, 0x8E, 0x38, 0x81, 0x01, 0x7E, 0x92, 0xB8,
                                     0x9B, 0xBE, 0x0F, 0xA9, 0x00, 0x17, 0x61, 0xA3, 0x74, 0x1F, 0x12, 0x1D, 0xEE, 0xD3, 0x37, 0xC2,
                                     0x5F, 0x6A, 0x9A, 0x91, 0x27, 0x67, 0xCC, 0x7C, 0xC1, 0x30, 0x39, 0xFC, 0xC8, 0xED, 0x60, 0xD5,
                                     0x47, 0xBB, 0x99, 0x25, 0xC6, 0xCA, 0x31, 0x2D, 0x57, 0x02, 0xFB, 0xB1, 0xA1, 0x41, 0x58, 0xDB,
                                     0x0B, 0x13, 0x2B, 0x1B, 0x04, 0xC9, 0x7A, 0x43, 0x90, 0x0C, 0x80, 0xDF, 0x9D, 0x84, 0x48, 0xDC,
                                     0x77, 0x08, 0x98, 0xDA, 0x11, 0x68, 0x4B, 0xA0, 0xE4, 0xA8, 0x54, 0xDE, 0xF6, 0xD0, 0x2E, 0xB9,
                                     0x8C, 0xD1, 0xAF, 0xAD, 0xE2, 0x19, 0xFE, 0xB7, 0xB0, 0x49, 0x63, 0x14, 0xBF, 0xE8, 0x5C, 0x0A,
                                     0xF0, 0x42, 0x51, 0x1A, 0x18, 0x06, 0xC4, 0x20, 0x73, 0x4A, 0x1C, 0x52, 0x24, 0xC7, 0x70, 0x5E,
                                     0x9C, 0xAC, 0xB4, 0x7B, 0xBD, 0x36, 0xBC, 0x0E, 0xEC, 0xDD, 0xE5, 0x3E, 0x4E, 0x56, 0x66, 0x6E ]
    
    private let headerSize = 19
    
    func encode(text: String) -> Data {
        let packetSize: UInt32 = UInt32(text.count + 2)
    
        let packetType: Byte = 0
        
        var encoded: [Byte] = [Byte](repeating: 0, count: headerSize + 4 + text.count)
        
        encoded[0] = Byte(arc4random_uniform(256))
        encoded[1] = Byte(arc4random_uniform(256))
        encoded[2] = 0xAA
        encoded[3] = 0xFF
        encoded[4] = packetType
        
        encoded.insert(contentsOf: byteArrayFrom(uint32: packetSize), at: 5)
        
        var indexA = encoded[0]
        var indexB = encoded[1]
        
        for i in 2...20 {
            encoded[i] = encoded[i] ^ bytesPt1[Int(indexA)] ^ bytesPt2[Int(indexB)]
            
            indexA = indexA < Byte.max ? indexA + 1 : 0
            indexB = indexB < Byte.max ? indexB + 1 : 0
        }
        
        let buffer = [Byte](text.utf8)
        
        encoded.insert(contentsOf: buffer, at: headerSize + 4)
        
        encoded[21] = Byte(arc4random_uniform(256))
        encoded[22] = Byte(arc4random_uniform(256))

        indexA = encoded[21]
        indexB = encoded[22]
        
        for i in 0...(text.count - 1) {
            encoded[headerSize + 4 + i] ^= bytesPt1[Int(indexA)] ^ bytesPt2[Int(indexB)]

            indexA = indexA < Byte.max ? indexA + 1 : 0
            indexB = indexB < Byte.max ? indexB + 1 : 0
        }
        
        encoded.removeSubrange((headerSize + 4 + text.count) ..< encoded.count)
        
        return Data(encoded)
    }
    
    func decode(data: Data) -> String? {
        let bytes = [Byte](data)
        
        if bytes.count < 23 {
            return nil
        }
        
        var header = Array(bytes[0...20])
        
        var indexA = header[0]
        var indexB = header[1]
        
        for i in 2...20 {
            header[i] = header[i] ^ bytesPt1[Int(indexA)] ^ bytesPt2[Int(indexB)]

            indexA = indexA < Byte.max ? indexA + 1 : 0
            indexB = indexB < Byte.max ? indexB + 1 : 0
        }
        
        let bufferSizeBytes = Array(header[5...8])
        guard let bufferSize = try? uint32From(byteArray: bufferSizeBytes) else { return nil }
        
        var content = header + Array(bytes[21...])
        
        if content.count <= bufferSize + UInt32(headerSize) + 1 {
            return nil
        }
        
        indexA = content[21]
        indexB = content[22]
        
        for i in 0...(bufferSize - 3) {
            content[headerSize + 4 + Int(i)] ^= bytesPt1[Int(indexA)] ^ bytesPt2[Int(indexB)]

            indexA = indexA < Byte.max ? indexA + 1 : 0
            indexB = indexB < Byte.max ? indexB + 1 : 0
        }
        
        let result = Array(content[23...])
        return String(bytes: result, encoding: .utf8)
    }
    
    func decodeMessageSize(data: Data) -> UInt32? {
        let bytes = [Byte](data)
        
        if bytes.count < 23 {
            return nil
        }
        
        var header = Array(bytes[0...20])
        
        var indexA = header[0]
        var indexB = header[1]
        
        for i in 2...20 {
            header[i] = header[i] ^ bytesPt1[Int(indexA)] ^ bytesPt2[Int(indexB)]

            indexA = indexA < Byte.max ? indexA + 1 : 0
            indexB = indexB < Byte.max ? indexB + 1 : 0
        }
        
        let bufferSizeBytes = Array(header[5...8])
        guard let bufferSize = try? uint32From(byteArray: bufferSizeBytes) else { return nil }
        
        return bufferSize
    }
    
    private func byteArrayFrom(uint32: UInt32) -> [Byte] {
        var bytes = [Byte](repeating: 0, count: 4)
        
        for i in 0...3 {
            let shift = (3 - i) * 8
            bytes[i] = Byte(uint32 >> shift & UInt32(Byte.max))
        }
        
        bytes.reverse()
        return bytes
    }
    
    private func uint32From(byteArray: [Byte]) throws -> UInt32 {
        if byteArray.count != MemoryLayout<UInt32>.size {
            throw fatalError("Wrong amount of bytes")
        }
        
        let data = Data(byteArray)
        return UInt32(littleEndian: data.withUnsafeBytes { $0.load(as: UInt32.self) })
    }
    
}
